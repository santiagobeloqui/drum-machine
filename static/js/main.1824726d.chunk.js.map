{"version":3,"sources":["Pad.js","sounds.js","PadsContainer.js","App.js","serviceWorker.js","index.js"],"names":["Pad","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","play","bind","assertThisInitialized","checkKey","state","lastPressedKey","className","inherits","createClass","key","value","_this2","setTimeout","setState","window","addEventListener","removeEventListener","Audio","sound","event","keyName","toLowerCase","react_default","a","createElement","onClick","onKeyPress","name","React","Component","sounds","PadsContainer","apply","arguments","pads","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","push","Pad_Pad","indexOf","err","return","App","class","PadsContainer_PadsContainer","Boolean","location","hostname","match","console","log","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1824726d.chunk.js","sourcesContent":["import React from 'react';\nimport './Pad.css';\n\nexport class Pad extends React.Component{\n    constructor(props){\n        super(props);\n        this.play = this.play.bind(this);\n        this.checkKey = this.checkKey.bind(this);\n        this.state = {\n            lastPressedKey:null,\n            className: 'pad'\n        }\n    }\n\n    componentDidUpdate(){\n        if(this.state.className == 'play'){\n            setTimeout(()=>{\n                this.setState({className: 'pad'});\n            }, 200);\n        }\n    }\n\n    componentDidMount(){\n        window.addEventListener('keydown', this.checkKey);\n    }\n\n    componentWillUnmount(){\n        window.removeEventListener('keydown', this.checkKey);\n    }\n\n\n    play(){\n        let audio = new Audio(this.props.sound.sound);\n        audio.play();\n        this.setState({className: 'play'}); \n    }\n\n    checkKey(event){\n        if(event.key === this.props.sound.keyName.toLowerCase()){\n            this.setState({ lastPressedKey: event.key }); \n            this.play();\n        } \n    }\n    render(){\n        return (\n        <div className={this.state.className} onClick={this.play} onKeyPress={this.checkKey}>\n        <p className=\"letter\">{this.props.sound.keyName}</p>\n        <p className=\"instrument-name\">{this.props.sound.name}</p>\n        </div>\n        );\n    }\n}","export let sounds = [\n    {\n        name: 'Kick 1',\n        keyName: 'Q',\n        sound: 'Kicks01.wav' \n    },\n    {\n        name: 'Kick 2',\n        keyName: 'W',\n        sound: '808-Kicks13.wav' \n    },\n    {\n        name: 'Kick 3',\n        keyName: 'E',\n        sound: 'Kicks34.wav' \n    },\n    {\n        name: 'Hi Hat 1',\n        keyName: 'A',\n        sound: '808-HiHats05.wav'\n    },\n    {\n        name: 'Hi Hat 2',\n        keyName: 'S',\n        sound: 'OpenHiHats05.wav' \n    },\n    {\n        name: 'Hi Hat 3',\n        keyName: 'D',\n        sound: 'OpenHiHats16.wav' \n    },\n    {\n        name: 'Clap',\n        keyName: 'Z',\n        sound: 'Clap02.wav' \n    },\n    {\n        name: 'Snare',\n        keyName: 'X',\n        sound: 'Snare02.wav' \n    },\n    {\n        name: 'Rim',\n        keyName: 'C',\n        sound: 'Rim4.wav' \n    }\n];","import React from 'react';\nimport {Pad} from './Pad';\nimport './PadsContainer.css';\nimport {sounds} from './sounds';\n\nexport class PadsContainer extends React.Component{\n    render(){\n        let pads = [];\n        for(let sound of sounds){\n            pads.push(<Pad sound={sound} key={sounds.indexOf(sound)} />)\n        }\n        return <div className='pads-container'>{pads}</div>;\n\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {PadsContainer} from './PadsContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n      <h1 class='title'>Drum Machine</h1>\n      <PadsContainer />\n      <p class='credits'>Coded by Santiago Beloqui</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.addEventListener('onKeyPress', ()=>{console.log(\"Hi\")});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}